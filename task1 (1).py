# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BzsTY5TzDF89e38-rB644ARS5x53YDeV
"""

#installing required libraries to perform Exploratory Data Analysis
pip install pandas numpy matplotlib seaborn

#importing the downloaded libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#load the dataset from device to the code
#dataset downloaded from kaagal:
#https://www.kaggle.com/datasets/heptapod/titanic
df = pd.read_csv('C:/Users/anush/Downloads/archive/train.csv')
# Check the first few rows
print(df.head())

#to understand the data in the dataset
#to check the structure and data types
print(df.info())
#to take summary statistics
print(df.describe())

#to check for missing values
print(df.isnull().sum())

#to visualize missing values
sns.heatmap(df.isnull(), cbar=False, cmap="viridis")
plt.title("Missing Values Heatmap")
plt.show()

# Histograms for numerical features
df.hist(bins=30, figsize=(10, 8))
plt.suptitle("Histograms of Numerical Features")
plt.show()

# Count plot for a categorical column (e.g., 'sex')
sns.countplot(x='Sex', data=df)
plt.title("Count of Passengers by Sex")
plt.show()

# Scatter plot between 'age' and 'fare'
sns.scatterplot(x='Age', y='Fare', data=df)
plt.title("Age vs. Fare")
plt.show()

# Box plot for 'age' based on 'Fare'
sns.boxplot(x='Age', y='Fare', data=df)
plt.title("Fare by Age")
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Correlation Heatmap")
plt.show()

# Box plot for outliers
sns.boxplot(x=df['Fare'])
plt.title("Box Plot of Fare")
plt.show()

# Z-score to detect outliers
from scipy.stats import zscore
df['fare_zscore'] = zscore(df['Fare'])
outliers = df[np.abs(df['fare_zscore']) > 3]
print(outliers)

# Group by 'age' and calculate mean fare
age_fare = df.groupby('Age')['Fare'].mean()
print(age_fare)

# Bar plot for grouped data
age_fare.plot(kind='bar', color=['blue', 'orange', 'green'])
plt.title("Average Fare by Age")
plt.ylabel("Fare")
plt.show()

# Save cleaned dataset
df.to_csv('cleaned_dataset.csv', index=False)

